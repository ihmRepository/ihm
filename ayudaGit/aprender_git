https://www.youtube.com/watch?v=QGKTdL7GG24 

[@]Como instalar git: apt-get install git

[@]Configurar git:
	Poner nombre:git config --global user.name "Miguel Herran"
	Correo electronico: git config --global user.email "<miguel.herran@udc.es>"

[@]Crear un repositorio en tu propio PC:
	Iniciar repositorio vacio:
		(1)Creamos una carpeta en donde vayamos a poner el repositorio.
		(2)Nos situamos dentro de la carpeta
		(3)Ejecutamos comando: git init
		(4)Se creara una carpeta .git que sera la que almacene los datos del repositorio, OJO en linux aparecera oculta.
	
	Clona un repositorio: Puedes clonar un repositorio de tu propio equipo o desde la red sin ningun problema, aqui pondremos el ejemplo de un repositrio en dropbox
		(1)Ejecutamos el comando:pushd -/Dropbox //La carpeta de Dropbox tiene que estar visible, guardas el directorio en memoria, lo pone arriba de todo en la pila.
		(2)Ejecutamos el comando:git init --bare repositorio.git //con --bare creamos un repositorio que nos permite enviar cambios desde otro repositrio
		(3)Ejecutamos el comando:popd //devuelve la ruta en la parte superior de la pila
		(4)Ejecutamos el comando:git clone -/Dropbox/repositorio.git 

	Clona un repositorio que esta en internet:
		(1)Ejecutamos el comando: git clone http://github.com/torvalds/linux //se copia todo el contenido del archivo


[@]Crear, modificar archivos:
	
	(1)Primero los creas con nano, touch...etc
	(2)Seleccionamos los archivos cuyos cambios queramos enviar y los agregamos al staging index
		(2.1)Ejecutamos el comando: git add main.c //añadimos el archivo main.c
		(2.2)Ejecutamos el comando: git add . //añadimos todos los archivos que hemos modificado
		(2.3)Ejecutamos el comando: git status //puedes ver lo que tienes en el staging index y esta listo para subir al repositorio (staging index tendran archivos temporales)

[@]Subir archivos a tu repositorio: Se subiran los archivos que estan en el staging index
	(1)Ejecutamos el comando: git commit //veremos los archivos que van a subirse, y te permitira poner un comentario.
		(1.1)En la linea ponemos una cabecera (menos de 50 caracteres)
		(1.2)La segunda linea tiene que ir en blanco.
		(1.3)Luego escribes el cuerpo del mensaje, las lineas no pueden tener mas de 72 caracteres

[@]Borrar archivos del staging index:
	(1)Ejecutamos el siguiente comando en el directorio donde este el repositorio: rm [archivo]
	(2)Ejecutas el comando: git rm [archivo] //El archivo queda marcado para borrar
	(3)Ejecutas el comando: git commit // para que te borre el archivo del repositorio

[@]Mover archivos:
	(1)Ejecutamos el siguiente comando: mv [archivo_en_origen] [archivo_destino] //te dira que has eliminado el archivo del origen y que has creado el archivo en el destino
	(2)Ejecutamos el siguiente comando:git add [archivo_destino] //te marcara como si hubieses movido el archivo

[@]Deshaciendo cambios:
	(1)Ejecutamos el siguiente comando: git status 
	(2)Ejecutamos el siguiente comando: git reset HEAD [archivo_seleccionado] //Eliminamos el ultimo add del archivo.
	(3)Ejecutamos el siguiente comando: git checkout -- [archivo_seleccionado] //Eliminamos desde el ultimo commit del archivo

[@]Ver historial:
	(1)Ejecutamos el siguiente comando: git log //Te visualiza todo al detalle, sino le pones cabecera a los mensaje no te va a dejar
	(2)Ejecutamos el siguiente comando: git log --oneline //te muestra una descripcion de una linea por commit
	(3)Ejecutamos el siguiente comando: git log --oneline --decorate //Puedes ver a que rama pertenece cada comit.

[@]Crear ramas: Se crea la rama master al creas un repositorio y a partir ahi puedes crear ramas que se monten sobre master.
	(1)Ejecutamos el siguiente comando: git branch [nombre_que_quieras_rama] //sino le pones cabecera a los mensaje no te va a dejar
	(2)Ejecutamos el siguiente comando: git branch //Puedes ver las ramas que tienes, sino le pones cabecera a los mensaje no te va a dejar

[@]Cambiar de rama:
	(1)Ejecutamos el siguiente comando: git checkout -b [nombre_rama_nueva] //Creas una rama nueva y la marcas como raiz (para que las demas que crees dependan de ella
	(2)Ejecutamos el siguiente comando: git checkout [nombre_rama_existente] //igual que el anterior pero sobre una rama que ya existe

[@]Borrar ramas:
	(1)Ejecutamos el siguiente comando: git branch -d [rama_existente] //no podemos crear ramas en las que nos encontremos.

[@]Fusionando ramas:
	(1)Ejecutamos el siguiente comando: git merge [rama_de_la_que_queremos_coger_datos] //combinas los datos de la rama que eligen con los datos de la rama en la que estas. Ojo si ahora te da por modificar los datos en ambas ramas, y hacer un merge habra un problema de conflicto, entras en el archivo y aparece marcado ambos cambios y podras decidir cual de ellos borrar, luego haces un add y no hace falta el commit

[@]Volver a antiguos commit:
	(1)Ejecutamos el siguiente comando: git log --oneline
	(2)Ejecutamos el siguiente comando: git checkout [elegimos_el_codigo] //Puedes crear una nueva rama o crear un tag sobre ese commit.
	(3)Ejecutamos el siguiente comando: git checkout [elegimos_el_codigo_actual] //volvemos al commit actual 

[@]TAG: Ponerle otro nombre, para no tener que andar con el codigo (de este modo podemos saber las versiones con facilidad)
	(1)Ejecutamos el siguiente comando: git log --oneline
	(2)Ejecutamos el siguiente comando: git tag [nombre_tag] //Para cambiarle el tag al commit actual
	(3)Ejecutamos el siguiente comando: git tag [nombre_tag] [codigo_de_commit] //Para cambiarle el tag al commit indicado

[@]Remoto:
	(1)Ejecutamos el siguiente comando: git remote [add,checkout...] [nombre_conexion] [Ruta] //git remote add imprimir https://github.com/ihmRepository/ihm.git
	(2)Ejecutamos el siguiente comando: git push [nombre_conexion] [archivo_deseado] //git push imprimir imprimir 
		Nombre:IhmRepository
		Contra:ihm12345
	(3)Ejecutamos el siguiente comando: git branch --all //ver todas las ramas, incluidas las remotas
	(4)Ejecutamos el siguiente comando: git pull [nombre_conexion] [rama_remota] //podemos descargar los cambios que haya hecho en la rama 
	(5)Ejecutamos el siguiente comando: git push [nombre_conexion] :[archivo_deseado] //git push imprimir :imprimir 

